}else{
nGUsed=nGUsed+1
}
}
}else{  #Score in not seed region
if(seqA[i] != seqB[i]){ #If not equal
if((seqA[i] == "G") | (seqA[i] == "T")){ #If G or U but different
if((seqB[i] == "G") | (seqB[i] == "T")){ #If B is different than A and G or T
GUnsed=GUnsed+1
}else{nGUnsed=nGUnsed+1}
}else{
nGUnsed=nGUnsed+1
}
}
}
}
score=10 - (7 * nGUsed) - (1.5 * GUsed) - (2 * nGUnsed) - (1.5 * GUnsed)
if(score < 0){score = 0}
return(score)
}
#Define function
ScoreSeqsPi= function (seqA,seqB){
if(!(is.character(seqA)) | !(is.character(seqA))){return(cat("Both sequences have to be characters"))}
if(nchar(seqA) != nchar(seqB)){return(cat("Both sequences have to be of the same length"))}
seqA=unlist(strsplit(toupper(seqA),""))
seqB=unlist(strsplit(toupper(seqB),""))
#Calculate scores
nGUsed=0
GUsed=0
GUnsed=0
nGUnsed=0
for(i in 1:length(seqA)){ #Please note that HengChis skip first bp in his calculations
#Score in seed
if((i > 1) & (i < 8)){
if(seqA[i] != seqB[i]){ #If not equal
if((seqA[i] == "G") | (seqA[i] == "T")){ #If G or U but different
if((seqB[i] == "G") | (seqB[i] == "T")){ #If B is different than A and G or T
GUsed=GUsed+1
}else{nGUsed=nGUsed+1}
}else{
nGUsed=nGUsed+1
}
}
}else{  #Score in not seed region
if(seqA[i] != seqB[i]){ #If not equal
if((seqA[i] == "G") | (seqA[i] == "T")){ #If G or U but different
if((seqB[i] == "G") | (seqB[i] == "T")){ #If B is different than A and G or T
GUnsed=GUnsed+1
}else{nGUnsed=nGUnsed+1}
}else{
nGUnsed=nGUnsed+1
}
}
}
}
score=10 - (7 * nGUsed) - (1.5 * GUsed) - (2 * nGUnsed) - (1.5 * GUnsed)
if(score < 0){score = 0}
return(score)
}
##Test
ScoreSeqsPi("TCAGTTAGCTTTCCGCAGCTT","tGAGTTAGCTTTCCGGAGCTT")
df1=data.frame(seq1=c(rep("TCAGTTAGCTTTCCGCAGCTT",6)))
df2=data.frame(seq2=c(rep("tGAGTTAGCTTTCCGGAGCTT",6)))
nrow(df)
nrow(df1)
is.data.frame()
is.data.frame(df1)
df1[1]
df1[1,1]
as.character(df1[1,1])
scoredfs=function(data1,data2, sum=FALSE){
if(!(is.data.frame(data1)) | !(is.data.frame(data1))){return(cat("Both inputs have to be dataframes"))}
if(nrow(data1) != nrow(data2)){return(cat("Both inputs have to be of the same size"))}
vals=c()
for(i in 1:nrow(data1)){
vals=append(vals,ScoreSeqsPi(as.character(data1[i,1]),as.character(data1[i,2])))
}
if(sum){
return(sum(vals))
}else{
return(vals)
}
}
scoredfs(df1,df2)
df2
scoredfs=function(data1,data2, sum=FALSE){
if(!(is.data.frame(data1)) | !(is.data.frame(data1))){return(cat("Both inputs have to be dataframes"))}
if(nrow(data1) != nrow(data2)){return(cat("Both inputs have to be of the same size"))}
vals=c()
for(i in 1:nrow(data1)){
vals=append(vals,ScoreSeqsPi(as.character(data1[i,1]),as.character(data2[i,2])))
}
if(sum){
return(sum(vals))
}else{
return(vals)
}
}
scoredfs(df1,df2)
df[1,1]
df1[1,1]
df1[2,1]
df1[5,1]
df1[6,1]
df1[7,1]
nrow(df1)
##data frame consideration
df1=data.frame(seq1=c(rep("TCAGTTAGCTTTCCGCAGCTT",6)))
df1
df2
ScoreSeqsPi(as.character(df1[1,1]),as.character(df2[1,1]))
scoredfs=function(data1,data2, sum=TRUE){
if(!(is.data.frame(data1)) | !(is.data.frame(data1))){return(cat("Both inputs have to be dataframes"))}
if(nrow(data1) != nrow(data2)){return(cat("Both inputs have to be of the same size"))}
vals=c()
for(i in 1:nrow(data1)){
vals=append(vals,ScoreSeqsPi(as.character(data1[i,1]),as.character(data2[i,1])))
}
if(sum){
return(sum(vals))
}else{
return(vals)
}
}
ScoreSeqsPi("TCAGTTAGCTTTCCGCAGCTT","tGAGTTAGCTTTCCGGAGCTT")
##data frame consideration
df1=data.frame(seq1=c(rep("TCAGTTAGCTTTCCGCAGCTT",6)))
df2=data.frame(seq2=c(rep("tGAGTTAGCTTTCCGGAGCTT",6)))
scoredfs(df1,df2)
#Withouth sum
scoredfs(df1,df2,sum=FALSE)
#Withouth sum
coso=scoredfs(df1,df2,sum=FALSE)
coso
names(coso)=as.character(df1[,1])
coso
scoredfs=function(data1,data2, sum=TRUE){
if(!(is.data.frame(data1)) | !(is.data.frame(data1))){return(cat("Both inputs have to be dataframes"))}
if(nrow(data1) != nrow(data2)){return(cat("Both inputs have to be of the same size"))}
vals=c()
for(i in 1:nrow(data1)){
vals=append(vals,ScoreSeqsPi(as.character(data1[i,1]),as.character(data2[i,1])))
}
if(sum){
return(sum(vals))
}else{
names(vals)=as.character(data1[,1])
return(vals)
}
}
##Test
ScoreSeqsPi("TCAGTTAGCTTTCCGCAGCTT","tGAGTTAGCTTTCCGGAGCTT")
##data frame consideration
df1=data.frame(seq1=c(rep("TCAGTTAGCTTTCCGCAGCTT",6)))
df2=data.frame(seq2=c(rep("tGAGTTAGCTTTCCGGAGCTT",6)))
#With sum
scoredfs(df1,df2)
#Withouth sum
scoredfs(df1,df2,sum=FALSE)
shiny::runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
shiny::runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
install.packages("colourpicker")
library("colourpicker")
shiny::runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
shiny::runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('~/Documents/Software/ShinnyApps/Transgene_generator/coloutpicker')
runApp('Documents/Software/ShinnyApps/Transgene_generator/coloutpicker')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
shiny::runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
if (interactive()) {
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
# only customize the 2 first sliders and the last one
# the color of the third one is empty
setSliderColor(c("DeepPink ", "#FF4500", "", "Teal"), c(1, 2, 4)),
sliderInput("obs", "My pink slider:",
min = 0, max = 100, value = 50
),
sliderInput("obs2", "My orange slider:",
min = 0, max = 100, value = 50
),
sliderInput("obs3", "My basic slider:",
min = 0, max = 100, value = 50
),
sliderInput("obs3", "My teal slider:",
min = 0, max = 100, value = 50
),
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
shinyApp(ui, server)
}
if (interactive()) {
# Full example
colorSelectorExample()
# Simple example
ui <- fluidPage(
colorSelectorInput(
inputId = "mycolor1", label = "Pick a color :",
choices = c("steelblue", "cornflowerblue",
"firebrick", "palegoldenrod",
"forestgreen")
),
verbatimTextOutput("result1")
)
server <- function(input, output, session) {
output$result1 <- renderPrint({
input$mycolor1
})
}
shinyApp(ui = ui, server = server)
}
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
runApp('Documents/Projects/Git_repositories/GeneBlockBuilder')
shiny::runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
shiny::runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/PATC_2_0')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
shiny::runApp('Documents/Projects/Git_repositories/ATAC-vis/v4')
?load
shiny::runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
runApp()
runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
shiny::runApp('Documents/Projects/Git_repositories/KhlifaWormProfiler')
shiny::runApp('Documents/Projects/Git_repositories/WormProfiler')
runApp('Documents/Projects/Git_repositories/WormProfiler')
runApp('Documents/Projects/Git_repositories/WormProfiler')
runApp('Documents/Projects/Git_repositories/WormProfiler')
runApp('Documents/Projects/Git_repositories/WormProfiler')
runApp('Documents/Projects/Git_repositories/WormProfiler')
shiny::runApp('Documents/Projects/Git_repositories/GeneBuilder_w_Dan')
runApp('Documents/Projects/Git_repositories/GeneBuilder_w_Dan')
runApp('Documents/Projects/Git_repositories/GeneBuilder_w_Dan')
runApp('Documents/Projects/Git_repositories/GeneBuilder_w_Dan')
runApp('Documents/Projects/Git_repositories/GeneBuilder_w_Dan')
runApp('Documents/Projects/Git_repositories/GeneBuilder_w_Dan')
runApp('Documents/Projects/Git_repositories/GeneBuilder_w_Dan')
runApp('Documents/Projects/Git_repositories/GeneBuilder_w_Dan')
install.packages("rmarkdown")
library(learnr)
knitr::opts_chunk$set(echo = FALSE)
quiz(
question("Which package contains functions for installing other R packages?",
answer("base"),
answer("tools"),
answer("utils", correct = TRUE),
answer("codetools")
),
question("Which of the R packages listed below are used to create plots?",
answer("lattice", correct = TRUE),
answer("tools"),
answer("stats"),
answer("grid", correct = TRUE)
)
)
library(learnr)
knitr::opts_chunk$set(echo = FALSE)
add <- function() {
}
mtcars
head(mtcars)
quiz(
question("Which package contains functions for installing other R packages?",
answer("base"),
answer("tools"),
answer("utils", correct = TRUE),
answer("codetools")
),
question("Which of the R packages listed below are used to create plots?",
answer("lattice", correct = TRUE),
answer("tools"),
answer("stats"),
answer("grid", correct = TRUE)
)
)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
load("/home/velazqam/Documents/Projects/CodonOptimization/RegAtlas/minimal-data.RData")
View(LCAPdev)
View(lcap.dt)
getwd()
plot(pressure)
plot(pressure)
plot(1,1)
plot(cars)
setwd("data/piRNA_data")
tt=read.csv("tempB.txt",header=F)
cc=read.table("../Cel_GeneBodies.bed",sep="\t",header=F)
rownames(tt)=as.character(tt[,1])
rownames(cc)=as.character(cc[,4])
pp=cbind(tt,(cc[rownames(tt),3]-cc[rownames(tt),2]))
colnames(pp)=c("TranscriptID","No.-Predidcted-piRNA-target-sites","No.-CLASH-Identified-piRNA-target-sites","No.-Common-piRNA-target-sites","GeneBodySize")
head(pp)
write.table(pp,"piRNA-scan_all_transcripts-data.tsv",sep="\t",quote=F,col.names=T,row.names=F)
#Go to data
setwd("./data")
#Load RegAtlas data
load("minimal-data.RData")
#Use table lcap.dt (also accesible web via the name tissue-specific.RNA-seq.dataset.txt)
#write.table(lcap.dt, "tissue-specific.RNA-seq.dataset.txt", quote = F, row = F, col = T, sep = '\t')
data=lcap.dt
data[,"Soma"]=apply(data[,c("Neurons", "Muscle", "Hypod.", "Intest.")],1, function(x){sum(x)})
data[,"Ubiq."]=apply(data[,c("Germline", "Neurons", "Muscle", "Hypod.", "Intest.")],1, function(x){sum(x)})
for (tissue in c("Germline", "Neurons", "Muscle", "Hypod.", "Intest.","Soma","Ubiq.")){
temp=data[data$which.tissues == tissue,]
write.table(temp[head(rev(order(temp[,tissue])),500),c("WormBaseID","geneID","which.tissues",tissue)],paste("Top500_",tissue,"_lcap-dt.tsv",sep=""),sep="\t",col.names=F,row.names=F, quote=F)
}
#Go to data
setwd("./data")
#Load RegAtlas data
load("minimal-data.RData")
#Use table lcap.dt (also accesible web via the name tissue-specific.RNA-seq.dataset.txt)
#write.table(lcap.dt, "tissue-specific.RNA-seq.dataset.txt", quote = F, row = F, col = T, sep = '\t')
data=lcap.dt
data[,"Soma"]=apply(data[,c("Neurons", "Muscle", "Hypod.", "Intest.")],1, function(x){sum(x)})
data[,"Ubiq."]=apply(data[,c("Germline", "Neurons", "Muscle", "Hypod.", "Intest.")],1, function(x){sum(x)})
for (tissue in c("Germline", "Neurons", "Muscle", "Hypod.", "Intest.","Soma","Ubiq.")){
temp=data[data$which.tissues == tissue,]
write.table(temp[head(rev(order(temp[,tissue])),500),c("WormBaseID","geneID","which.tissues",tissue)],paste("Top500_",tissue,"_lcap-dt.tsv",sep=""),sep="\t",col.names=F,row.names=F, quote=F)
}
#Go to data
setwd("./data")
#Load RegAtlas data
load("minimal-data.RData")
#Use table lcap.dt (also accesible web via the name tissue-specific.RNA-seq.dataset.txt)
#write.table(lcap.dt, "tissue-specific.RNA-seq.dataset.txt", quote = F, row = F, col = T, sep = '\t')
data=lcap.dt
data[,"Soma"]=apply(data[,c("Neurons", "Muscle", "Hypod.", "Intest.")],1, function(x){sum(x)})
data[,"Ubiq."]=apply(data[,c("Germline", "Neurons", "Muscle", "Hypod.", "Intest.")],1, function(x){sum(x)})
for (tissue in c("Germline", "Neurons", "Muscle", "Hypod.", "Intest.","Soma","Ubiq.")){
temp=data[data$which.tissues == tissue,]
write.table(temp[head(rev(order(temp[,tissue])),500),c("WormBaseID","geneID","which.tissues",tissue)],paste("Top500_",tissue,"_lcap-dt.tsv",sep=""),sep="\t",col.names=F,row.names=F, quote=F)
}
View(lcap.dt)
table(lcap.dt$which.tissues)
#Go to data
setwd("./data")
#Load RegAtlas data
load("minimal-data.RData")
#Use table lcap.dt (also accesible web via the name tissue-specific.RNA-seq.dataset.txt)
#write.table(lcap.dt, "tissue-specific.RNA-seq.dataset.txt", quote = F, row = F, col = T, sep = '\t')
data=lcap.dt
data[,"Soma"]=apply(data[,c("Neurons", "Muscle", "Hypod.", "Intest.")],1, function(x){sum(x)})
data[,"Ubiq."]=apply(data[,c("Germline", "Neurons", "Muscle", "Hypod.", "Intest.")],1, function(x){sum(x)})
for (tissue in c("Germline", "Neurons", "Muscle", "Hypod.", "Intest.","Soma","Ubiq.")){
temp=data[data$which.tissues == tissue,]
write.table(temp[head(rev(order(temp[,tissue])),500),c("WormBaseID","geneID","which.tissues",tissue)],paste("Top500_",tissue,"_lcap-dt.tsv",sep=""),sep="\t",col.names=F,row.names=F, quote=F)
}
#Go to data
setwd("./data")
#Load RegAtlas data
load("minimal-data.RData")
#Use table lcap.dt (also accesible web via the name tissue-specific.RNA-seq.dataset.txt)
#write.table(lcap.dt, "tissue-specific.RNA-seq.dataset.txt", quote = F, row = F, col = T, sep = '\t')
data=lcap.dt
data[,"Soma"]=apply(data[,c("Neurons", "Muscle", "Hypod.", "Intest.")],1, function(x){sum(x)})
data[,"Ubiq."]=apply(data[,c("Germline", "Neurons", "Muscle", "Hypod.", "Intest.")],1, function(x){sum(x)})
for (tissue in c("Germline", "Neurons", "Muscle", "Hypod.", "Intest.","Soma","Ubiq.")){
temp=data[data$which.tissues == tissue,]
write.table(temp[head(rev(order(temp[,tissue])),500),c("WormBaseID","geneID","which.tissues",tissue)],paste("Top500_",tissue,"_lcap-dt.tsv",sep=""),sep="\t",col.names=F,row.names=F, quote=F)
}
setwd("data/piRNA_data")
tt=read.csv("tempB.txt",header=F)
cc=read.table("../Cel_GeneBodies.bed",sep="\t",header=F)
rownames(tt)=as.character(tt[,1])
rownames(cc)=as.character(cc[,4])
pp=cbind(tt,(cc[rownames(tt),3]-cc[rownames(tt),2]))
colnames(pp)=c("TranscriptID","No.-Predidcted-piRNA-target-sites","No.-CLASH-Identified-piRNA-target-sites","No.-Common-piRNA-target-sites","GeneBodySize")
head(pp)
write.table(pp,"piRNA-scan_all_transcripts-data.tsv",sep="\t",quote=F,col.names=T,row.names=F)
shiny::runApp('Documents/Projects/Git_repositories/piRNAiv2')
runApp('Documents/Projects/Git_repositories/piRNAiv2')
runApp('Documents/Projects/Git_repositories/piRNAiv2')
runApp('Documents/Projects/Git_repositories/piRNAiv2')
runApp('Documents/Projects/Git_repositories/piRNAiv2')
runApp('Documents/Projects/Git_repositories/piRNAiv2')
runApp('Documents/Projects/Git_repositories/piRNAiv2')
system("ls")
shiny::runApp('Documents/Projects/Git_repositories/piRNAi_dev')
shiny::runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
shiny::runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
shiny::runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
?checkboxGroupInput
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
runApp('Documents/Projects/Git_repositories/piRNAi_dev')
setwd("/home/velazqam/Documents/Projects/Git_repositories/piRNAi_dev")
toto=read.table("WorkingSpace/Fluo_sizes.tab")
head(toto)
toto=read.table("WorkingSpace/Fluo_sizes.tab", sep="\t")
head(toto)
toto=read.table("WorkingSpace/Fluo_sizes.tab", sep="\t", stringsAsFactors=F)
shiny::runApp()
runApp()
popo=read.table("WorkingSpace/Fluo_master_simplified.tab",sep="\t",stringsAsFactors=F)
head(popo)
head(toto)
runApp()
View(popo)
runApp()
runApp()
runApp()
runApp()
runApp()
